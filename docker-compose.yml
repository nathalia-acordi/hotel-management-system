services:
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  user:
    build:
      context: ./services/user
      args:
        INCLUDE_DEV: "true"
    image: ese-t1-user:latest
    container_name: user-service
    env_file:
      - .env.local
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      RABBITMQ_URL: amqp://rabbitmq
      MONGO_FORCE_IPV4: "1"
      JWT_SECRET: ${JWT_SECRET:-segredo_super_secreto}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3000/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      start_period: 40s
      retries: 10

  room:
    build:
      context: ./services/room
      args:
        BASE_IMAGE: "node:20-bullseye"
        INCLUDE_DEV: "true"
    image: ese-t1-room:latest
    container_name: room-service
    env_file:
      - .env.local
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      RABBITMQ_URL: amqp://rabbitmq
      MONGO_FORCE_IPV4: "1"
      JWT_SECRET: ${JWT_SECRET:-segredo_super_secreto}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3004/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      start_period: 40s
      retries: 10

  reservation:
    build: ./services/reservation
    image: ese-t1-reservation:latest
    container_name: reservation-service
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: development
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://rabbitmq:5672}
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-segredo_super_secreto}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3000/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      start_period: 40s
      retries: 10

  payment:
    build: ./services/payment
    image: ese-t1-payment:latest
    container_name: payment-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      RESERVATION_URL: http://reservation-service:3000
      JWT_SECRET: ${JWT_SECRET:-segredo_super_secreto}
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://rabbitmq:5672}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3003/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      start_period: 40s
      retries: 10

  auth:
    build:
      context: ./services/auth
      args:
        INCLUDE_DEV: "true"
    image: ese-t1-auth:latest
    container_name: auth
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      USER_URL: http://user:3000
      USER_SERVICE_URL: http://user:3000
      PORT: 3001
      RABBITMQ_URL: amqp://rabbitmq
      JWT_SECRET: ${JWT_SECRET:-segredo_super_secreto}
    depends_on:
      rabbitmq:
        condition: service_healthy
      user:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3001/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      start_period: 40s
      retries: 10

  gateway:
    build: ./services/gateway
    image: ese-t1-gateway:latest
    container_name: gateway
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      JWT_SECRET: ${JWT_SECRET:-segredo_super_secreto}
    depends_on:
      user:
        condition: service_started
      auth:
        condition: service_started
      room:
        condition: service_started
      reservation:
        condition: service_started
      payment:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3005/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      start_period: 40s
      retries: 10

  